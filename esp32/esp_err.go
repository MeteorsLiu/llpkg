package freertos

import (
	"github.com/goplus/lib/c"
	_ "unsafe"
)

const ESP_OK = 0
const ESP_ERR_NO_MEM = 0x101
const ESP_ERR_INVALID_ARG = 0x102
const ESP_ERR_INVALID_STATE = 0x103
const ESP_ERR_INVALID_SIZE = 0x104
const ESP_ERR_NOT_FOUND = 0x105
const ESP_ERR_NOT_SUPPORTED = 0x106
const ESP_ERR_TIMEOUT = 0x107
const ESP_ERR_INVALID_RESPONSE = 0x108
const ESP_ERR_INVALID_CRC = 0x109
const ESP_ERR_INVALID_VERSION = 0x10A
const ESP_ERR_INVALID_MAC = 0x10B
const ESP_ERR_NOT_FINISHED = 0x10C
const ESP_ERR_NOT_ALLOWED = 0x10D
const ESP_ERR_WIFI_BASE = 0x3000
const ESP_ERR_MESH_BASE = 0x4000
const ESP_ERR_FLASH_BASE = 0x6000
const ESP_ERR_HW_CRYPTO_BASE = 0xc000
const ESP_ERR_MEMPROT_BASE = 0xd000
const X__ASSERT_FUNC = "??"

type EspErrT c.Int

/**
 * @brief Returns string for esp_err_t error codes
 *
 * This function finds the error code in a pre-generated lookup-table and
 * returns its string representation.
 *
 * The function is generated by the Python script
 * tools/gen_esp_err_to_name.py which should be run each time an esp_err_t
 * error is modified, created or removed from the IDF project.
 *
 * @param code esp_err_t error code
 * @return string error message
 */
// llgo:link EspErrT.EspErrToName C.esp_err_to_name
func (recv_ EspErrT) EspErrToName() *c.Char {
	return nil
}

/**
 * @brief Returns string for esp_err_t and system error codes
 *
 * This function finds the error code in a pre-generated lookup-table of
 * esp_err_t errors and returns its string representation. If the error code
 * is not found then it is attempted to be found among system errors.
 *
 * The function is generated by the Python script
 * tools/gen_esp_err_to_name.py which should be run each time an esp_err_t
 * error is modified, created or removed from the IDF project.
 *
 * @param code esp_err_t error code
 * @param[out] buf buffer where the error message should be written
 * @param buflen Size of buffer buf. At most buflen bytes are written into the buf buffer (including the terminating null byte).
 * @return buf containing the string error message
 */
// llgo:link EspErrT.EspErrToNameR C.esp_err_to_name_r
func (recv_ EspErrT) EspErrToNameR(buf *c.Char, buflen c.SizeT) *c.Char {
	return nil
}

/** @cond */
// llgo:link EspErrT.X_espErrorCheckFailed C._esp_error_check_failed
func (recv_ EspErrT) X_espErrorCheckFailed(file *c.Char, line c.Int, function *c.Char, expression *c.Char) {
}

// llgo:link EspErrT.X_espErrorCheckFailedWithoutAbort C._esp_error_check_failed_without_abort
func (recv_ EspErrT) X_espErrorCheckFailedWithoutAbort(file *c.Char, line c.Int, function *c.Char, expression *c.Char) {
}
